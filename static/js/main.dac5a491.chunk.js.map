{"version":3,"sources":["initial-data.js","Task/Task.jsx","Column/Column.jsx","App.js","serviceWorker.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Task","props","draggableId","task","index","provided","snapshot","className","isDragging","draggableProps","dragHandleProps","ref","innerRef","TaskContainer","memo","map","key","Column","column","droppableId","type","isDraggingOver","droppableProps","placeholder","ColumnInnerContainer","taskMap","taskId","ColumnContainer","data","columnId","App","useState","setData","onDragEnd","result","destination","source","startColumn","finishColumn","startTaskIds","Array","from","splice","newStartColumn","finishTaskIds","newFinishColumn","newState","newTaskIds","newColumn","newData","newColumnOrder","direction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dac5a491.chunk.js","sourcesContent":["const initialData = {\r\n  tasks: {\r\n    'task-1': { id: 'task-1', content: 'Take out the garbage'},\r\n    'task-2': { id: 'task-2', content: 'Watch fav shows'},\r\n    'task-3': { id: 'task-3', content: 'Charge phone'},\r\n    'task-4': { id: 'task-4', content: 'Cook food'},\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      id: 'column-1',\r\n      title: 'To do',\r\n      taskIds: ['task-1','task-2','task-3','task-4',]\r\n    },\r\n    'column-2': {\r\n      id: 'column-2',\r\n      title: 'In progress',\r\n      taskIds: []\r\n    },\r\n    'column-3': {\r\n      id: 'column-3',\r\n      title: 'Done',\r\n      taskIds: []\r\n    },\r\n  },\r\n  columnOrder: ['column-1', 'column-2', 'column-3']\r\n};\r\nexport default initialData;","import React from 'react';\r\nimport './Task.css'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Task = (props) => {\r\n  return ( \r\n    <Draggable draggableId={props.task.id} index={props.index}>\r\n      {(provided, snapshot) => (\r\n        <div \r\n          // className=\"task-container\"\r\n          className={`task-container ` + (snapshot.isDragging && `task-container-highlight`)}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          {/* dragHandleProps controls what can be used to drag the element around */}\r\n          {/* <div className=\"task-handle\" {...provided.dragHandleProps}/> */}\r\n          {props.task.content}\r\n        </div> \r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n \r\nexport default Task;","import React, { memo } from 'react';\r\nimport './Column.css';\r\nimport Task from '../Task/Task';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst TaskContainer = memo((props) => {\r\n  return (\r\n    props.tasks.map((task, index) => (\r\n      <Task key={task.id} task={task} index={index}/>\r\n    )) \r\n  );\r\n});\r\n\r\nconst Column = (props) => {\r\n  return ( \r\n    <Draggable draggableId={props.column.id} index={props.index}>\r\n      {(provided) => (\r\n        <div className=\"column-container\" {...provided.draggableProps} ref={provided.innerRef}> \r\n          <h3 className=\"column-title\" {...provided.dragHandleProps}>{props.column.title}</h3>\r\n          <Droppable droppableId={props.column.id} type=\"task\">\r\n            {(provided, snapshot) => (\r\n              <div \r\n                // className=\"column-task-list\"\r\n                className={`column-task-list ` + (snapshot.isDraggingOver && `column-task-list-highlight`)}\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                <TaskContainer tasks={props.tasks}/>\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div> \r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n \r\nexport default Column;","import React, { useState, memo } from 'react';\r\nimport './App.css';\r\n// import Board from './components/Board.js';\r\nimport initialData from './initial-data'\r\nimport Column from './Column/Column';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst ColumnInnerContainer = memo(({column, taskMap, index}) => {\r\n  const tasks = column.taskIds.map(taskId => taskMap[taskId]);\r\n\r\n  return <Column key={column.id} column={column} tasks={tasks} index={index}/>;\r\n});\r\n\r\nconst ColumnContainer = ({data}) => {\r\n  return (\r\n    data.columnOrder.map((columnId, index) => {\r\n      const column = data.columns[columnId];\r\n\r\n      return <ColumnInnerContainer column={column} taskMap={data.tasks} index={index}/>\r\n    })\r\n  );\r\n}\r\n\r\nconst App = () => {\r\n\r\n  const [data, setData] = useState(initialData);\r\n\r\n  \r\n\r\n  const onDragEnd = (result) => {\r\n    // document.body.style.color = 'inherit'\r\n    // document.body.style.backgroundColor = 'inherit'\r\n    // console.log(result);\r\n    // reorder the column\r\n    // when u drop something\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) {\r\n      // not dropping a column so cancel the drop\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      // dropped in original position\r\n      return;\r\n    }\r\n\r\n    if(type === 'column') {\r\n      const newColumnOrder = Array.from(data.columnOrder);\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...data,\r\n        columnOrder: newColumnOrder,\r\n      };\r\n      setData(newState);\r\n      return;\r\n    }\r\n\r\n    const startColumn = data.columns[source.droppableId];\r\n    const finishColumn = data.columns[destination.droppableId];\r\n    if(startColumn === finishColumn) {\r\n      const newTaskIds = Array.from(startColumn.taskIds);\r\n      // move task from old index to new index\r\n      // remove 1 item at index\r\n      newTaskIds.splice(source.index, 1); \r\n      // remove 0 items, insert draggableId\r\n      newTaskIds.splice(destination.index, 0, draggableId); \r\n  \r\n      const newColumn = {\r\n        ...startColumn,\r\n        taskIds: newTaskIds\r\n      };\r\n  \r\n      const newData = {\r\n        ...data,\r\n        columns: {\r\n          ...data.columns,\r\n          [newColumn.id]: newColumn,\r\n        }\r\n      };\r\n      // call database update here after setting data, or mabe just have a useEffect()\r\n      setData(newData);\r\n      return;\r\n    }\r\n    // moving from different columns, not in a if() cause there is a return up there\r\n    const startTaskIds = Array.from(startColumn.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStartColumn = {\r\n      ...startColumn,\r\n      taskIds: startTaskIds,\r\n    };\r\n\r\n    const finishTaskIds = Array.from(finishColumn.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId);\r\n    const newFinishColumn = {\r\n      ...finishColumn,\r\n      taskIds: finishTaskIds,\r\n    };\r\n\r\n    const newState = {\r\n      ...data,\r\n      columns: {\r\n        ...data.columns,\r\n        [newStartColumn.id]: newStartColumn,\r\n        [newFinishColumn.id]: newFinishColumn,\r\n      },\r\n    };\r\n    setData(newState);\r\n  }\r\n\r\n  const onDragStart = () => {\r\n  //   document.body.style.color = 'orange'\r\n  //   document.body.style.transition = 'background-color 0.2s ease'\r\n  // }\r\n  // const onDragUpdate = (update) => {\r\n  //   const { destination } = update;\r\n  //   const opacity = destination ? destination.index / Object.keys(data.tasks).length : 0\r\n  //   document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\r\n  }\r\n\r\n  return (\r\n    <DragDropContext \r\n      // onDragStart={onDragStart}\r\n      // onDragUpdate={onDragUpdate}\r\n      onDragEnd={onDragEnd}\r\n    >\r\n      <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n        {(provided) => (\r\n          <div className=\"app-container\" {...provided.droppableProps} ref={provided.innerRef}>\r\n            {/* {loadColumns()} */}\r\n            <ColumnContainer data={data}/>\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}